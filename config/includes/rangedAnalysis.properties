# rse configuration
# cpa.arg.keepCoveredStatesInReached = true

# ------------------------------------------------------------------
# This configuration file uses value analysis of local integer
# variables in a model-checking configuration.
# Found errors are cross-checked by CBMC.
# An assumption is generated for all states which cannot be verified.
# ------------------------------------------------------------------

# include ../residualProgramGenerator.properties
#include ../includes/valueAnalysis.properties
# include ../includes/rangedAnalysis.properties

# cpa.conditions.global.time.cpu = 8000ms
# cpa.conditions.global.time.cpu.hardlimit = 7000ms

limits.time.cpu = 10s

cpa.loopbound.maxLoopIterations = 10
cpa.loopbound.trackStack = false

cpa.predicate.encodeBitvectorAs = INTEGER

cpa.predicate.abstraction.type = FORMULA

# solver.enableLoggingInSolver =  true

# solver.logAllQueries = true
# solver.logfile = Queries.txt

# solver.solver = Z3

analysis.collectAssumptions = true

counterexample.continueAfterInfeasibleError = false
counterexample.checkCounterexamples = false
counterexample.removeInfeasibleErrors = false

pathrange.generateRangeAfterTimeout = true
cpa.generateRangeAfterTimeout = true

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.conditions.global.GlobalConditionsCPA, cpa.loopbound.LoopBoundCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA

assumptions.automatonFile = AssumptionAutomaton.txt

log.consoleLevel = INFO

[cpa.value]
# pathrange = [(main::a=0 main::b=2 main::c=2), null]
unknownValueHandling = INTRODUCE_SYMBOLIC
# pathrange = [(main::a=0 main::b=1), null]
# pathrange = [(main::a=21 main::b=1), (main::a=21 main::b=1)]
# pathrange = [(main::a=20 main::b=20 main::c=3), null]
pathrangeFile = ./output/pathrange.txt
performRse = true
# pathrange = [(gcd::a=2 gcd::b=4), null]

[analysis.traversal]
order = dfs
useReversePostorder = true