digraph CFA {
26 [shape="circle" label="N26\n46"]
67 [shape="circle" label="N67\n45"]
68 [shape="circle" label="N68\n44"]
69 [shape="circle" label="N69\n43"]
70 [shape="circle" label="N70\n42"]
71 [shape="circle" label="N71\n41"]
72 [shape="circle" label="N72\n40"]
27 [shape="circle" label="N27\n39"]
28 [shape="circle" label="N28\n38"]
29 [shape="circle" label="N29\n37"]
30 [shape="circle" label="N30\n36"]
31 [shape="circle" label="N31\n35"]
32 [shape="circle" label="N32\n34"]
33 [shape="doublecircle" label="N33\n33"]
36 [shape="circle" label="N36\n32"]
43 [shape="circle" label="N43\n31"]
44 [shape="circle" label="N44\n30"]
45 [shape="circle" label="N45\n29"]
46 [shape="doublecircle" label="N46\n28"]
49 [shape="circle" label="N49\n27"]
55 [shape="circle" label="N55\n26"]
56 [shape="doublecircle" label="N56\n25"]
59 [shape="circle" label="N59\n24"]
25 [shape="circle" label="N25\n23"]
58 [shape="circle" label="N58\n22"]
60 [shape="circle" label="N60\n21"]
61 [shape="doublecircle" label="N61\n20"]
64 [shape="circle" label="N64\n19"]
57 [shape="circle" label="N57\n18"]
63 [shape="circle" label="N63\n17"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
42 [shape="circle" label="N42\n1"]
39 [shape="circle" label="N39\n0"]
38 [shape="doublecircle" label="N38\n5"]
41 [shape="circle" label="N41\n4"]
34 [shape="circle" label="N34\n3"]
40 [shape="circle" label="N40\n2"]
65 [shape="circle" label="N65\n16"]
62 [shape="circle" label="N62\n15"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
6 [shape="circle" label="N6\n2"]
48 [shape="circle" label="N48\n14"]
52 [shape="circle" label="N52\n13"]
13 [shape="circle" label="N13\n10"]
14 [shape="circle" label="N14\n9"]
15 [shape="circle" label="N15\n8"]
16 [shape="circle" label="N16\n7"]
17 [shape="doublecircle" label="N17\n6"]
20 [shape="circle" label="N20\n5"]
12 [shape="circle" label="N12\n0"]
53 [shape="diamond" label="N53\n12"]
50 [shape="circle" label="N50\n9"]
47 [shape="circle" label="N47\n8"]
51 [shape="circle" label="N51\n11"]
8 [shape="circle" label="N8\n3"]
9 [shape="circle" label="N9\n2"]
10 [shape="circle" label="N10\n1"]
7 [shape="circle" label="N7\n0"]
54 [shape="circle" label="N54\n10"]
19 [shape="diamond" label="N19\n4"]
21 [shape="circle" label="N21\n3"]
18 [shape="circle" label="N18\n2"]
22 [shape="circle" label="N22\n1"]
35 [shape="circle" label="N35\n7"]
37 [shape="circle" label="N37\n6"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="default return"]
4 -> 5 [label="Label: ERROR"]
5 -> 6 [label="__VERIFIER_error();"]
6 -> 3 [label=""]}
subgraph cluster_elem_exists {
label="elem_exists()"
13 -> 14 [label="Function start dummy edge"]
14 -> 15 [label="int i;"]
15 -> 16 [label="for"]
16 -> 17 [label="i = 0;"]
17 -> 19 [label="[i < size]"]
17 -> 20 [label="[!(i < size)]"]
20 -> 12 [label="return 0;"]
19 -> 22 [label="[(set[i]) == value]"]
19 -> 21 [label="[!((set[i]) == value)]"]
21 -> 18 [label=""]
18 -> 17 [label="i = i + 1;"]
22 -> 12 [label="return 0;"]}
subgraph cluster_insert {
label="insert()"
8 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="set[size] = value;"]
10 -> 7 [label="return size + 1;"]}
subgraph cluster_main {
label="main()"
26 -> 67 [label="INIT GLOBAL VARS"]
67 -> 68 [label="void __VERIFIER_error();"]
68 -> 69 [label="void __VERIFIER_assert(int cond);"]
69 -> 70 [label="int insert(int set[], int size, int value);"]
70 -> 71 [label="int elem_exists(int set[], int size, int value);"]
71 -> 72 [label="int main();"]
72 -> 27 [label="Function start dummy edge"]
27 -> 28 [label="int n = 0;"]
28 -> 29 [label="int set[100000];"]
29 -> 30 [label="int x;"]
30 -> 31 [label="int y;"]
31 -> 32 [label="for"]
32 -> 33 [label="x = 0;"]
33 -> 35 [label="[x < n]"]
33 -> 36 [label="[!(x < n)]"]
36 -> 43 [label="int values[100000];"]
43 -> 44 [label="int v;"]
44 -> 45 [label="for"]
45 -> 46 [label="v = 0;"]
46 -> 48 [label="[v < 100000]"]
46 -> 49 [label="[!(v < 100000)]"]
49 -> 55 [label="for"]
55 -> 56 [label="x = 0;"]
56 -> 58 [label="[x < n]"]
56 -> 59 [label="[!(x < n)]"]
59 -> 25 [label="return 0;"]
58 -> 60 [label="for"]
60 -> 61 [label="y = x + 1;"]
61 -> 63 [label="[y < n]"]
61 -> 64 [label="[!(y < n)]"]
64 -> 57 [label=""]
57 -> 56 [label="x = x + 1;"]
63 -> 65 [label="__VERIFIER_assert((set[x]) != (set[y]));" style="dotted" arrowhead="empty"]
42 -> 39 [label=""]
39 -> 38 [label="y = y + 1;"]
38 -> 40 [label="[y < n]"]
38 -> 41 [label="[!(y < n)]"]
41 -> 34 [label=""]
34 -> 33 [label="x = x + 1;"]
40 -> 42 [label="__VERIFIER_assert((set[x]) != (set[y]));" style="dotted" arrowhead="empty"]
65 -> 62 [label=""]
62 -> 61 [label="y = y + 1;"]
48 -> 52 [label="int __CPAchecker_TMP_0;"]
52 -> 53 [label="__CPAchecker_TMP_0 = elem_exists(set, n, values[v]);" style="dotted" arrowhead="empty"]
53 -> 51 [label="[__CPAchecker_TMP_0 == 0]"]
53 -> 50 [label="[!(__CPAchecker_TMP_0 == 0)]"]
50 -> 47 [label=""]
47 -> 46 [label="v = v + 1;"]
51 -> 54 [label="n = insert(set, n, values[v]);" style="dotted" arrowhead="empty"]
54 -> 50 [label=""]
35 -> 37 [label="for"]
37 -> 38 [label="y = x + 1;"]}
63 -> 1 [label="__VERIFIER_assert((set[x]) != (set[y]))"]
0 -> 65 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((set[x]) != (set[y]));"]
0 -> 42 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((set[x]) != (set[y]));"]
40 -> 1 [label="__VERIFIER_assert((set[x]) != (set[y]))"]
52 -> 13 [label="elem_exists(set, n, values[v])"]
12 -> 53 [label="Return edge from elem_exists to main: __CPAchecker_TMP_0 = elem_exists(set, n, values[v]);"]
51 -> 8 [label="insert(set, n, values[v])"]
7 -> 54 [label="Return edge from insert to main: n = insert(set, n, values[v]);"]}